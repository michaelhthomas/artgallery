// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetProfileResponse, UpdateProfileData, UpdateProfileResponse, GetAllCollectorsData, GetAllCollectorsResponse, CreateCollectorData, CreateCollectorResponse, GetCollectorByIdData, GetCollectorByIdResponse, LoginData, LoginResponse, GetAllArtistsData, GetAllArtistsResponse, CreateArtistData, CreateArtistResponse, GetArtistData, GetArtistResponse, GetProtectedResourceResponse, GetPublicResourceResponse } from './types.gen';

export class ProfileControllerService {
    /**
     * @returns ProfileResponse OK
     * @throws ApiError
     */
    public static getProfile(): CancelablePromise<GetProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/profile',
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProfileResponse OK
     * @throws ApiError
     */
    public static updateProfile(data: UpdateProfileData): CancelablePromise<UpdateProfileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/profile',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
}

export class CollectorControllerService {
    /**
     * @param data The data for the request.
     * @param data.q
     * @returns Collector OK
     * @throws ApiError
     */
    public static getAllCollectors(data: GetAllCollectorsData = {}): CancelablePromise<GetAllCollectorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/collectors',
            query: {
                q: data.q
            },
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Collector OK
     * @throws ApiError
     */
    public static createCollector(data: CreateCollectorData): CancelablePromise<CreateCollectorResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/collectors',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Collector OK
     * @throws ApiError
     */
    public static getCollectorById(data: GetCollectorByIdData): CancelablePromise<GetCollectorByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/collectors/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
}

export class AuthControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthResponse OK
     * @throws ApiError
     */
    public static login(data: LoginData): CancelablePromise<LoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
}

export class ArtistControllerService {
    /**
     * @param data The data for the request.
     * @param data.q
     * @returns Artist OK
     * @throws ApiError
     */
    public static getAllArtists(data: GetAllArtistsData = {}): CancelablePromise<GetAllArtistsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/artist',
            query: {
                q: data.q
            },
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Artist OK
     * @throws ApiError
     */
    public static createArtist(data: CreateArtistData): CancelablePromise<CreateArtistResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/artist',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Artist OK
     * @throws ApiError
     */
    public static getArtist(data: GetArtistData): CancelablePromise<GetArtistResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/artist/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
}

export class ResourceControllerService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getProtectedResource(): CancelablePromise<GetProtectedResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/resource',
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static getPublicResource(): CancelablePromise<GetPublicResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/public/resource',
            errors: {
                422: 'Unprocessable Entity'
            }
        });
    }
    
}