// This file is auto-generated by @hey-api/openapi-ts

export const $ValidationErrorResponse = {
    type: 'object',
    description: 'Structured response returned when validation fails',
    properties: {
        message: {
            type: 'string',
            description: 'Human-readable error summary message',
            example: 'Validation failed with 2 errors'
        },
        errors: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            description: 'Map of field names to lists of error messages',
            example: {
                email: ['Invalid format', 'Email already in use'],
                password: ['Too weak']
            }
        }
    },
    required: ['errors', 'message']
} as const;

export const $SaleCreateRequest = {
    type: 'object',
    description: 'Sale Creation Request',
    properties: {
        artworkId: {
            type: 'integer',
            format: 'int32',
            description: 'Artwork ID being sold',
            example: 42
        },
        buyerId: {
            type: 'integer',
            format: 'int32',
            description: 'Buyer ID',
            example: 7
        },
        saleDate: {
            type: 'string',
            format: 'date',
            description: "Sale date (YYYY-MM-DD). Defaults to today's date if omitted",
            example: '2025-04-26'
        },
        salePrice: {
            type: 'string',
            description: 'Sale price in USD',
            example: 12500
        },
        saleTax: {
            type: 'string',
            description: 'Sales tax in USD',
            example: 750
        },
        amountRemittedToOwner: {
            type: 'string',
            description: 'Amount remitted to owner in USD',
            example: 10000
        },
        salespersonSsn: {
            type: 'string',
            description: 'Social-security number of the salesperson who handled the sale (exactly 9 digits)',
            example: 123456789,
            minLength: 1,
            pattern: '\\d{9}'
        }
    },
    required: ['artworkId', 'buyerId', 'salespersonSsn']
} as const;

export const $ArtworkResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        artistId: {
            type: 'integer',
            format: 'int32'
        },
        artistName: {
            type: 'string'
        },
        ownerName: {
            type: 'string'
        },
        status: {
            type: 'string'
        },
        workImage: {
            '$ref': '#/components/schemas/AssetResponse'
        },
        workTitle: {
            type: 'string'
        },
        workYearCompleted: {
            type: 'string'
        },
        workMedium: {
            type: 'string'
        },
        workStyle: {
            type: 'string'
        },
        workType: {
            type: 'string'
        },
        workSize: {
            type: 'string'
        },
        dateListed: {
            type: 'string',
            format: 'date'
        },
        dateShown: {
            type: 'string',
            format: 'date'
        },
        dateSold: {
            type: 'string',
            format: 'date'
        },
        dateReturned: {
            type: 'string',
            format: 'date'
        },
        askingPrice: {
            type: 'number'
        },
        salePrice: {
            type: 'number'
        },
        collectorSocialSecurityNumber: {
            type: 'string'
        }
    },
    required: ['artistId', 'artistName', 'id', 'ownerName', 'workTitle']
} as const;

export const $AssetResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        filename: {
            type: 'string'
        },
        contentType: {
            type: 'string'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        downloadUrl: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['contentType', 'createdAt', 'downloadUrl', 'filename', 'id', 'size']
} as const;

export const $SaleResponse = {
    type: 'object',
    properties: {
        invoiceNumber: {
            type: 'number'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        amountRemittedToOwner: {
            type: 'number'
        },
        price: {
            type: 'number'
        },
        tax: {
            type: 'number'
        },
        salespersonName: {
            type: 'string'
        },
        buyerName: {
            type: 'string'
        },
        artwork: {
            '$ref': '#/components/schemas/ArtworkResponse'
        }
    },
    required: ['artwork', 'buyerName', 'invoiceNumber', 'salespersonName']
} as const;

export const $MailingListSignupRequest = {
    type: 'object',
    description: 'Mailing List Signup Request',
    properties: {
        firstName: {
            type: 'string',
            description: 'First name',
            example: 'Jane',
            maxLength: 15,
            minLength: 0
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            example: 'Doe',
            maxLength: 20,
            minLength: 0
        },
        areaCode: {
            type: 'string',
            description: 'Area code',
            example: 864,
            maxLength: 3,
            minLength: 0
        },
        telephoneNumber: {
            type: 'string',
            description: 'Telephone number',
            example: 5551234,
            maxLength: 7,
            minLength: 0
        },
        street: {
            type: 'string',
            description: 'Street address',
            example: 123,
            maxLength: 50,
            minLength: 0
        },
        city: {
            type: 'string',
            description: 'City',
            example: 'Greenville'
        },
        state: {
            type: 'string',
            description: 'State',
            example: 'SC'
        },
        zipCode: {
            type: 'string',
            description: 'Zip code',
            example: 29601
        },
        preferredArtistFirstName: {
            type: 'string',
            description: 'Preferred artist first name',
            example: 'Pablo'
        },
        preferredArtistLastName: {
            type: 'string',
            description: 'Preferred artist last name',
            example: 'Picasso'
        },
        preferredMedium: {
            type: 'string',
            description: 'Preferred medium',
            example: 'Watercolor',
            maxLength: 15,
            minLength: 0
        },
        preferredStyle: {
            type: 'string',
            description: 'Preferred style',
            example: 'Impressionist',
            maxLength: 15,
            minLength: 0
        },
        preferredType: {
            type: 'string',
            description: 'Preferred type',
            example: 'Landscape',
            maxLength: 20,
            minLength: 0
        }
    },
    required: ['firstName', 'lastName']
} as const;

export const $ProfileUpdateRequest = {
    type: 'object',
    description: 'User profile information update',
    properties: {
        firstName: {
            type: 'string',
            description: 'First name of the user.',
            example: 'John'
        },
        lastName: {
            type: 'string',
            description: 'Last name of the user.',
            example: 'Smith'
        },
        email: {
            type: 'string',
            description: 'Email of the user.',
            example: 'john.smith@gmail.com'
        },
        avatarUrl: {
            type: 'string',
            description: 'URL to an avatar image for the user.',
            example: 'https://example.com'
        },
        currentPassword: {
            type: 'string',
            description: "User's current password",
            example: 'password123'
        },
        newPassword: {
            type: 'string',
            description: 'New password for the user',
            example: 'password123'
        }
    }
} as const;

export const $ProfileResponse = {
    type: 'object',
    properties: {
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        avatarUrl: {
            type: 'string'
        }
    },
    required: ['avatarUrl', 'email', 'firstName', 'lastName']
} as const;

export const $CollectorCreateRequest = {
    type: 'object',
    description: 'Collector Creation Request',
    properties: {
        firstName: {
            type: 'string',
            description: 'First name',
            example: 'Bob',
            minLength: 1
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            example: 'Smith',
            minLength: 1
        },
        interviewDate: {
            type: 'string',
            format: 'date',
            description: 'Date of interview',
            example: '2023-01-01'
        },
        interviewerName: {
            type: 'string',
            description: 'Interviewer name',
            example: 'Kevin Treu'
        },
        areaCode: {
            type: 'string',
            description: 'Area code',
            example: 123
        },
        telephoneNumber: {
            type: 'string',
            description: 'Telephone number',
            example: 1234567
        },
        street: {
            type: 'string',
            description: 'Street address',
            example: 123
        },
        city: {
            type: 'string',
            description: 'City',
            example: 'Anytown'
        },
        state: {
            type: 'string',
            description: 'State',
            example: 'CA'
        },
        zipCode: {
            type: 'string',
            description: 'Zip code',
            example: 12345
        },
        socialSecurityNumber: {
            type: 'string',
            description: 'Social security number',
            example: '123-45-6789'
        },
        preferredArtistFirstName: {
            type: 'string',
            description: 'Preferred artist first name',
            example: 'Pablo'
        },
        preferredArtistLastName: {
            type: 'string',
            description: 'Preferred artist last name',
            example: 'Picasso'
        },
        collectionMedium: {
            type: 'string',
            description: 'Collection medium',
            example: 'Oil'
        },
        collectionStyle: {
            type: 'string',
            description: 'Collection style',
            example: 'Abstract'
        },
        collectionType: {
            type: 'string',
            description: 'Collection type',
            example: 'Painting'
        }
    },
    required: ['firstName', 'lastName', 'socialSecurityNumber']
} as const;

export const $ArtShow = {
    type: 'object',
    properties: {
        showTitle: {
            type: 'string',
            maxLength: 50,
            minLength: 0
        },
        showFeaturedArtist: {
            '$ref': '#/components/schemas/Artist'
        },
        showTheme: {
            type: 'string',
            maxLength: 50,
            minLength: 0
        },
        showOpeningDate: {
            type: 'string',
            format: 'date'
        },
        showClosingDate: {
            type: 'string',
            format: 'date'
        },
        artworks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Artwork'
            }
        }
    },
    required: ['artworks', 'showClosingDate', 'showOpeningDate', 'showTitle']
} as const;

export const $Artist = {
    type: 'object',
    properties: {
        artistId: {
            type: 'integer',
            format: 'int32'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        interviewDate: {
            type: 'string',
            format: 'date'
        },
        interviewerName: {
            type: 'string'
        },
        areaCode: {
            type: 'string'
        },
        telephoneNumber: {
            type: 'string'
        },
        street: {
            type: 'string'
        },
        zip: {
            '$ref': '#/components/schemas/Zip'
        },
        salesLastYear: {
            type: 'number'
        },
        salesYearToDate: {
            type: 'number'
        },
        socialSecurityNumber: {
            type: 'string'
        },
        usualMedium: {
            type: 'string'
        },
        usualStyle: {
            type: 'string'
        },
        usualType: {
            type: 'string'
        },
        artworks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Artwork'
            }
        }
    },
    required: ['artworks', 'firstName', 'lastName', 'salesLastYear', 'salesYearToDate']
} as const;

export const $Artwork = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        artist: {
            '$ref': '#/components/schemas/Artist'
        },
        workImage: {
            '$ref': '#/components/schemas/Asset'
        },
        workTitle: {
            type: 'string',
            maxLength: 50,
            minLength: 0
        },
        askingPrice: {
            type: 'number'
        },
        dateListed: {
            type: 'string',
            format: 'date'
        },
        dateReturned: {
            type: 'string',
            format: 'date'
        },
        dateShown: {
            type: 'string',
            format: 'date'
        },
        status: {
            type: 'string',
            maxLength: 15,
            minLength: 0
        },
        workMedium: {
            type: 'string',
            maxLength: 15,
            minLength: 0
        },
        workSize: {
            type: 'string',
            maxLength: 15,
            minLength: 0
        },
        workStyle: {
            type: 'string',
            maxLength: 15,
            minLength: 0
        },
        workType: {
            type: 'string',
            maxLength: 20,
            minLength: 0
        },
        workYearCompleted: {
            type: 'string',
            maxLength: 4,
            minLength: 0
        },
        collector: {
            '$ref': '#/components/schemas/Collector'
        },
        shownIn: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ArtShow'
            },
            uniqueItems: true
        },
        sale: {
            '$ref': '#/components/schemas/Sale'
        }
    },
    required: ['artist', 'shownIn', 'workTitle']
} as const;

export const $Asset = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        filename: {
            type: 'string'
        },
        contentType: {
            type: 'string'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        downloadUri: {
            type: 'string'
        }
    },
    required: ['contentType', 'createdAt', 'downloadUri', 'filename', 'id', 'size']
} as const;

export const $Buyer = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        firstName: {
            type: 'string',
            maxLength: 15,
            minLength: 0
        },
        lastName: {
            type: 'string',
            maxLength: 20,
            minLength: 0
        },
        street: {
            type: 'string',
            maxLength: 50,
            minLength: 0
        },
        zip: {
            '$ref': '#/components/schemas/Zip'
        },
        areaCode: {
            type: 'string',
            maxLength: 3,
            minLength: 0
        },
        telephoneNumber: {
            type: 'string',
            maxLength: 7,
            minLength: 0
        },
        purchasesLastYear: {
            type: 'number'
        },
        purchasesYearToDate: {
            type: 'number'
        }
    },
    required: ['firstName', 'lastName', 'purchasesLastYear', 'purchasesYearToDate']
} as const;

export const $Collector = {
    type: 'object',
    properties: {
        socialSecurityNumber: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        interviewDate: {
            type: 'string',
            format: 'date'
        },
        interviewerName: {
            type: 'string'
        },
        areaCode: {
            type: 'string'
        },
        telephoneNumber: {
            type: 'string'
        },
        street: {
            type: 'string'
        },
        zip: {
            '$ref': '#/components/schemas/Zip'
        },
        salesLastYear: {
            type: 'number'
        },
        salesYearToDate: {
            type: 'number'
        },
        collectionArtistId: {
            '$ref': '#/components/schemas/Artist'
        },
        collectionMedium: {
            type: 'string'
        },
        collectionStyle: {
            type: 'string'
        },
        collectionType: {
            type: 'string'
        },
        artworks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Artwork'
            }
        }
    },
    required: ['artworks', 'firstName', 'lastName', 'salesLastYear', 'salesYearToDate', 'socialSecurityNumber']
} as const;

export const $Sale = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        artwork: {
            '$ref': '#/components/schemas/Artwork'
        },
        amountRemittedToOwner: {
            type: 'number'
        },
        saleDate: {
            type: 'string',
            format: 'date'
        },
        salePrice: {
            type: 'number'
        },
        saleTax: {
            type: 'number'
        },
        buyer: {
            '$ref': '#/components/schemas/Buyer'
        },
        salesperson: {
            '$ref': '#/components/schemas/Salesperson'
        }
    },
    required: ['artwork', 'buyer', 'salesperson']
} as const;

export const $Salesperson = {
    type: 'object',
    properties: {
        socialSecurityNumber: {
            type: 'string',
            maxLength: 9,
            minLength: 0
        },
        firstName: {
            type: 'string',
            maxLength: 15,
            minLength: 0
        },
        lastName: {
            type: 'string',
            maxLength: 20,
            minLength: 0
        },
        street: {
            type: 'string',
            maxLength: 50,
            minLength: 0
        },
        zip: {
            '$ref': '#/components/schemas/Zip'
        }
    },
    required: ['firstName', 'lastName']
} as const;

export const $Zip = {
    type: 'object',
    properties: {
        zip: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        state: {
            type: 'string'
        }
    },
    required: ['city', 'state', 'zip']
} as const;

export const $BuyerCreateRequest = {
    type: 'object',
    description: 'Buyer Creation Request',
    properties: {
        firstName: {
            type: 'string',
            description: 'First name',
            example: 'Alice',
            maxLength: 15,
            minLength: 0
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            example: 'Campbell',
            maxLength: 20,
            minLength: 0
        },
        street: {
            type: 'string',
            description: 'Street address',
            example: 123,
            maxLength: 50,
            minLength: 0
        },
        zipCode: {
            type: 'string',
            description: 'ZIP code (must exist in Zip table)',
            example: 29613
        },
        city: {
            type: 'string',
            description: 'City',
            example: 'Anytown'
        },
        state: {
            type: 'string',
            description: 'State',
            example: 'CA'
        },
        areaCode: {
            type: 'string',
            description: 'Area code (3 digits)',
            example: 864,
            pattern: '\\d{3}'
        },
        telephoneNumber: {
            type: 'string',
            description: 'Telephone number (7 digits)',
            example: 5551234,
            pattern: '\\d{7}'
        }
    },
    required: ['firstName', 'lastName']
} as const;

export const $BuyerResponse = {
    type: 'object',
    description: 'Buyer Response DTO',
    properties: {
        id: {
            type: 'integer',
            format: 'int32',
            description: 'Buyer ID',
            example: 12
        },
        firstName: {
            type: 'string',
            description: 'First name',
            example: 'Alice'
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            example: 'Campbell'
        },
        street: {
            type: 'string',
            description: 'Street address',
            example: 123
        },
        zipCode: {
            type: 'string',
            description: 'ZIP code',
            example: 29613
        },
        areaCode: {
            type: 'string',
            description: 'Area code (3 digits)',
            example: 864
        },
        telephoneNumber: {
            type: 'string',
            description: 'Telephone number (7 digits)',
            example: 5551234
        },
        purchasesLastYear: {
            type: 'number',
            description: 'Purchases last year (USD)',
            example: 1500
        },
        purchasesYearToDate: {
            type: 'number',
            description: 'Purchases year-to-date (USD)',
            example: 300
        }
    },
    required: ['firstName', 'id', 'lastName']
} as const;

export const $AuthRequest = {
    type: 'object',
    description: 'API Login and Authorization Request',
    properties: {
        username: {
            type: 'string',
            description: 'Username',
            example: 'admin',
            minLength: 1
        },
        password: {
            type: 'string',
            description: 'Password',
            example: 'admin123',
            maxLength: 2147483647,
            minLength: 6
        }
    },
    required: ['password', 'username']
} as const;

export const $AuthResponse = {
    type: 'object',
    properties: {
        token: {
            type: 'string',
            description: 'JWT Authorization Token',
            example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJhYmNkMTIzIiwiZXhwaXJ5IjoxNjQ2NjM1NjExMzAxfQ.3Thp81rDFrKXr3WrY1MyMnNK8kKoZBX9lg-JwFznR-M'
        },
        username: {
            type: 'string',
            description: 'Username',
            example: 'admin'
        },
        email: {
            type: 'string',
            description: 'Email address',
            example: 'admin@furman.edu'
        },
        firstName: {
            type: 'string',
            description: 'First name',
            example: 'John'
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            example: 'Doe'
        }
    },
    required: ['email', 'firstName', 'lastName', 'token', 'username']
} as const;

export const $ArtworkCreateRequest = {
    type: 'object',
    description: 'Artwork Creation Request',
    properties: {
        artistId: {
            type: 'integer',
            format: 'int32',
            description: 'Artist ID',
            example: 1
        },
        workImage: {
            type: 'string',
            format: 'uuid',
            description: 'Asset ID for the image associated with the work',
            example: 'a81bc81b-dead-4e5d-abff-90865d1e13b1'
        },
        workTitle: {
            type: 'string',
            description: 'Title of the artwork',
            example: 'Starry Night',
            maxLength: 50,
            minLength: 2
        },
        workYearCompleted: {
            type: 'string',
            description: 'Year completed',
            example: 1889,
            maxLength: 4,
            minLength: 4
        },
        workMedium: {
            type: 'string',
            description: 'Medium',
            example: 'Oil',
            maxLength: 15,
            minLength: 2
        },
        workStyle: {
            type: 'string',
            description: 'Style',
            example: 'Abstract',
            maxLength: 15,
            minLength: 2
        },
        workType: {
            type: 'string',
            description: 'Type',
            example: 'Painting',
            maxLength: 20,
            minLength: 2
        },
        workSize: {
            type: 'string',
            description: 'Size',
            example: '24x36',
            maxLength: 15,
            minLength: 2
        },
        collectorSocialSecurityNumber: {
            type: 'string',
            description: "Collector's social security number",
            example: 123456789,
            maxLength: 9,
            minLength: 9
        },
        dateListed: {
            type: 'string',
            format: 'date',
            description: 'Date listed',
            example: '2023-01-01',
            minLength: 1
        },
        askingPrice: {
            type: 'string',
            description: 'Asking price in USD',
            example: 5000,
            minLength: 1
        }
    },
    required: ['artistId', 'askingPrice', 'dateListed', 'workMedium', 'workSize', 'workStyle', 'workTitle', 'workType', 'workYearCompleted']
} as const;

export const $ArtistCreateRequest = {
    type: 'object',
    description: 'Artist Creation Request',
    properties: {
        firstName: {
            type: 'string',
            description: 'First name',
            example: 'Bob',
            minLength: 1
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            example: 'Smith',
            minLength: 1
        },
        interviewDate: {
            type: 'string',
            format: 'date',
            description: 'Date of interview',
            example: '2023-01-01'
        },
        interviewerName: {
            type: 'string',
            description: 'Interviewer name',
            example: 'Kevin Treu'
        },
        areaCode: {
            type: 'string',
            description: 'Area code',
            example: 123
        },
        telephoneNumber: {
            type: 'string',
            description: 'Telephone number',
            example: 1234567
        },
        street: {
            type: 'string',
            description: 'Street address',
            example: 123
        },
        city: {
            type: 'string',
            description: 'City',
            example: 'Anytown'
        },
        state: {
            type: 'string',
            description: 'State',
            example: 'CA'
        },
        zipCode: {
            type: 'string',
            description: 'Zip code',
            example: 12345
        },
        socialSecurityNumber: {
            type: 'string',
            description: 'Social security number',
            example: '123-45-6789'
        },
        usualMedium: {
            type: 'string',
            description: 'Usual medium',
            example: 'Oil'
        },
        usualStyle: {
            type: 'string',
            description: 'Usual style',
            example: 'Abstract'
        },
        usualType: {
            type: 'string',
            description: 'Usual type',
            example: 'Painting'
        }
    },
    required: ['firstName', 'lastName']
} as const;

export const $ArtistResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        areaCode: {
            type: 'string'
        },
        telephoneNumber: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        salesLastYear: {
            type: 'number'
        },
        salesYearToDate: {
            type: 'number'
        },
        usualMedium: {
            type: 'string'
        },
        usualStyle: {
            type: 'string'
        },
        usualType: {
            type: 'string'
        }
    },
    required: ['firstName', 'id', 'lastName', 'salesLastYear', 'salesYearToDate']
} as const;

export const $StatsResponse = {
    type: 'object',
    properties: {
        totalArtworks: {
            type: 'integer',
            format: 'int64'
        },
        newArtworksMonth: {
            type: 'integer',
            format: 'int64'
        },
        activeExhibitions: {
            type: 'integer',
            format: 'int64'
        },
        exhibitionsInNextWeek: {
            type: 'integer',
            format: 'int64'
        },
        totalArtists: {
            type: 'integer',
            format: 'int64'
        },
        newArtistsMonth: {
            type: 'integer',
            format: 'int64'
        },
        totalCollectors: {
            type: 'integer',
            format: 'int64'
        },
        newCollectorsMonth: {
            type: 'integer',
            format: 'int64'
        }
    },
    required: ['activeExhibitions', 'exhibitionsInNextWeek', 'newArtistsMonth', 'newArtworksMonth', 'newCollectorsMonth', 'totalArtists', 'totalArtworks', 'totalCollectors']
} as const;

export const $ShowResponse = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        featuredArtistName: {
            type: 'string'
        },
        theme: {
            type: 'string'
        },
        openingDate: {
            type: 'string',
            format: 'date'
        },
        closingDate: {
            type: 'string',
            format: 'date'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['closingDate', 'images', 'openingDate', 'title']
} as const;

export const $ShowDetail = {
    type: 'object',
    properties: {
        show: {
            '$ref': '#/components/schemas/ShowResponse'
        },
        artworks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ArtworkResponse'
            }
        }
    },
    required: ['artworks', 'show']
} as const;

export const $SalespersonResponse = {
    type: 'object',
    description: 'Salesperson Response DTO',
    properties: {
        socialSecurityNumber: {
            type: 'string',
            description: 'Social-security number (9 digits)',
            example: 123456789
        },
        firstName: {
            type: 'string',
            description: 'First name',
            example: 'Grace'
        },
        lastName: {
            type: 'string',
            description: 'Last name',
            example: 'Hopper'
        },
        street: {
            type: 'string',
            description: 'Street address',
            example: 42
        },
        zipCode: {
            type: 'string',
            description: 'ZIP code',
            example: 29613
        }
    },
    required: ['firstName', 'lastName', 'socialSecurityNumber']
} as const;

export const $CollectorResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        areaCode: {
            type: 'string'
        },
        telephoneNumber: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        salesLastYear: {
            type: 'number'
        },
        salesYearToDate: {
            type: 'number'
        },
        collectionMedium: {
            type: 'string'
        },
        collectionStyle: {
            type: 'string'
        },
        collectionType: {
            type: 'string'
        }
    },
    required: ['firstName', 'id', 'lastName', 'salesLastYear', 'salesYearToDate']
} as const;

export const $ArtworkListingResponse = {
    type: 'object',
    properties: {
        work: {
            '$ref': '#/components/schemas/ArtworkResponse'
        },
        sale: {
            '$ref': '#/components/schemas/SaleResponse'
        },
        shownIn: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ShowResponse'
            }
        }
    },
    required: ['shownIn', 'work']
} as const;