// This file is auto-generated by @hey-api/openapi-ts

/**
 * Structured response returned when validation fails
 */
export type ValidationErrorResponse = {
    /**
     * Human-readable error summary message
     */
    message: string;
    /**
     * Map of field names to lists of error messages
     */
    errors: {
        [key: string]: Array<(string)>;
    };
};

/**
 * User profile information update
 */
export type ProfileUpdateRequest = {
    /**
     * First name of the user.
     */
    firstName?: string;
    /**
     * Last name of the user.
     */
    lastName?: string;
    /**
     * Email of the user.
     */
    email?: string;
    /**
     * URL to an avatar image for the user.
     */
    avatarUrl?: string;
    /**
     * User's current password
     */
    currentPassword?: string;
    /**
     * New password for the user
     */
    newPassword?: string;
};

export type ProfileResponse = {
    firstName: string;
    lastName: string;
    email: string;
    avatarUrl: string;
};

/**
 * Mailing List Signup Request
 */
export type MailingListSignupRequest = {
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Area code
     */
    areaCode?: string;
    /**
     * Telephone number
     */
    telephoneNumber?: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Zip code
     */
    zipCode?: string;
    /**
     * Preferred artist first name
     */
    preferredArtistFirstName?: string;
    /**
     * Preferred artist last name
     */
    preferredArtistLastName?: string;
    /**
     * Preferred medium
     */
    preferredMedium?: string;
    /**
     * Preferred style
     */
    preferredStyle?: string;
    /**
     * Preferred type
     */
    preferredType?: string;
};

/**
 * Collector Creation Request
 */
export type CollectorCreateRequest = {
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Date of interview
     */
    interviewDate?: string;
    /**
     * Interviewer name
     */
    interviewerName?: string;
    /**
     * Area code
     */
    areaCode?: string;
    /**
     * Telephone number
     */
    telephoneNumber?: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Zip code
     */
    zipCode?: string;
    /**
     * Social security number
     */
    socialSecurityNumber: string;
    /**
     * Preferred artist first name
     */
    preferredArtistFirstName?: string;
    /**
     * Preferred artist last name
     */
    preferredArtistLastName?: string;
    /**
     * Collection medium
     */
    collectionMedium?: string;
    /**
     * Collection style
     */
    collectionStyle?: string;
    /**
     * Collection type
     */
    collectionType?: string;
};

export type Artist = {
    artistId?: number;
    firstName: string;
    lastName: string;
    interviewDate?: string;
    interviewerName?: string;
    areaCode?: string;
    telephoneNumber?: string;
    street?: string;
    zip?: Zip;
    salesLastYear?: number;
    salesYearToDate?: number;
    socialSecurityNumber?: string;
    usualMedium?: string;
    usualStyle?: string;
    usualType?: string;
};

export type Collector = {
    socialSecurityNumber: string;
    firstName: string;
    lastName: string;
    interviewDate?: string;
    interviewerName?: string;
    areaCode?: string;
    telephoneNumber?: string;
    street?: string;
    zip?: Zip;
    salesLastYear?: number;
    salesYearToDate?: number;
    collectionArtistId?: Artist;
    collectionMedium?: string;
    collectionStyle?: string;
    collectionType?: string;
};

export type Zip = {
    zip: string;
    city: string;
    state: string;
};

/**
 * API Login and Authorization Request
 */
export type AuthRequest = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

export type AuthResponse = {
    /**
     * JWT Authorization Token
     */
    token: string;
    /**
     * Username
     */
    username: string;
    /**
     * Email address
     */
    email: string;
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
};

/**
 * Artist Creation Request
 */
export type ArtistCreateRequest = {
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Date of interview
     */
    interviewDate?: string;
    /**
     * Interviewer name
     */
    interviewerName?: string;
    /**
     * Area code
     */
    areaCode?: string;
    /**
     * Telephone number
     */
    telephoneNumber?: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Zip code
     */
    zipCode?: string;
    /**
     * Social security number
     */
    socialSecurityNumber?: string;
    /**
     * Usual medium
     */
    usualMedium?: string;
    /**
     * Usual style
     */
    usualStyle?: string;
    /**
     * Usual type
     */
    usualType?: string;
};

export type GetProfileResponse = ProfileResponse;

export type UpdateProfileData = {
    requestBody: ProfileUpdateRequest;
};

export type UpdateProfileResponse = ProfileResponse;

export type SignupForMailingListData = {
    requestBody: MailingListSignupRequest;
};

export type SignupForMailingListResponse = string;

export type GetAllCollectorsData = {
    q?: string;
};

export type GetAllCollectorsResponse = Array<Collector>;

export type CreateCollectorData = {
    requestBody: CollectorCreateRequest;
};

export type CreateCollectorResponse = Collector;

export type GetCollectorByIdData = {
    id: number;
};

export type GetCollectorByIdResponse = Collector;

export type LoginData = {
    requestBody: AuthRequest;
};

export type LoginResponse = AuthResponse;

export type GetAllArtistsData = {
    q?: string;
};

export type GetAllArtistsResponse = Array<Artist>;

export type CreateArtistData = {
    requestBody: ArtistCreateRequest;
};

export type CreateArtistResponse = Artist;

export type GetArtistData = {
    id: number;
};

export type GetArtistResponse = Artist;

export type $OpenApiTs = {
    '/api/profile': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: ProfileResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: UpdateProfileData;
            res: {
                /**
                 * OK
                 */
                200: ProfileResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/mailing-list/signup': {
        post: {
            req: SignupForMailingListData;
            res: {
                /**
                 * OK
                 */
                200: string;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/collectors': {
        get: {
            req: GetAllCollectorsData;
            res: {
                /**
                 * OK
                 */
                200: Array<Collector>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: CreateCollectorData;
            res: {
                /**
                 * OK
                 */
                200: Collector;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/collectors/{id}': {
        get: {
            req: GetCollectorByIdData;
            res: {
                /**
                 * OK
                 */
                200: Collector;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/auth/login': {
        post: {
            req: LoginData;
            res: {
                /**
                 * OK
                 */
                200: AuthResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/artist': {
        get: {
            req: GetAllArtistsData;
            res: {
                /**
                 * OK
                 */
                200: Array<Artist>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: CreateArtistData;
            res: {
                /**
                 * OK
                 */
                200: Artist;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/artist/{id}': {
        get: {
            req: GetArtistData;
            res: {
                /**
                 * OK
                 */
                200: Artist;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
};