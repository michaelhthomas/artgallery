// This file is auto-generated by @hey-api/openapi-ts

/**
 * Structured response returned when validation fails
 */
export type ValidationErrorResponse = {
    /**
     * Human-readable error summary message
     */
    message: string;
    /**
     * Map of field names to lists of error messages
     */
    errors: {
        [key: string]: Array<(string)>;
    };
};

/**
 * Sale Creation Request
 */
export type SaleCreateRequest = {
    /**
     * Artwork ID being sold
     */
    artworkId: number;
    /**
     * Buyer ID
     */
    buyerId: number;
    /**
     * Sale date (YYYY-MM-DD). Defaults to today's date if omitted
     */
    saleDate?: string;
    /**
     * Sale price in USD
     */
    salePrice?: string;
    /**
     * Sales tax in USD
     */
    saleTax?: string;
    /**
     * Amount remitted to owner in USD
     */
    amountRemittedToOwner?: string;
    /**
     * Social-security number of the salesperson who handled the sale (exactly 9 digits)
     */
    salespersonSsn: string;
};

export type SaleResponse = {
    invoiceNumber: number;
    date?: string;
    amountRemittedToOwner?: number;
    price?: number;
    tax?: number;
    salespersonName: string;
    buyerName: string;
};

/**
 * Mailing List Signup Request
 */
export type MailingListSignupRequest = {
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Area code
     */
    areaCode?: string;
    /**
     * Telephone number
     */
    telephoneNumber?: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Zip code
     */
    zipCode?: string;
    /**
     * Preferred artist first name
     */
    preferredArtistFirstName?: string;
    /**
     * Preferred artist last name
     */
    preferredArtistLastName?: string;
    /**
     * Preferred medium
     */
    preferredMedium?: string;
    /**
     * Preferred style
     */
    preferredStyle?: string;
    /**
     * Preferred type
     */
    preferredType?: string;
};

/**
 * User profile information update
 */
export type ProfileUpdateRequest = {
    /**
     * First name of the user.
     */
    firstName?: string;
    /**
     * Last name of the user.
     */
    lastName?: string;
    /**
     * Email of the user.
     */
    email?: string;
    /**
     * URL to an avatar image for the user.
     */
    avatarUrl?: string;
    /**
     * User's current password
     */
    currentPassword?: string;
    /**
     * New password for the user
     */
    newPassword?: string;
};

export type ProfileResponse = {
    firstName: string;
    lastName: string;
    email: string;
    avatarUrl: string;
};

/**
 * Collector Creation Request
 */
export type CollectorCreateRequest = {
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Date of interview
     */
    interviewDate?: string;
    /**
     * Interviewer name
     */
    interviewerName?: string;
    /**
     * Area code
     */
    areaCode?: string;
    /**
     * Telephone number
     */
    telephoneNumber?: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Zip code
     */
    zipCode?: string;
    /**
     * Social security number
     */
    socialSecurityNumber: string;
    /**
     * Preferred artist first name
     */
    preferredArtistFirstName?: string;
    /**
     * Preferred artist last name
     */
    preferredArtistLastName?: string;
    /**
     * Collection medium
     */
    collectionMedium?: string;
    /**
     * Collection style
     */
    collectionStyle?: string;
    /**
     * Collection type
     */
    collectionType?: string;
};

export type ArtShow = {
    showTitle: string;
    showFeaturedArtist?: Artist;
    showTheme?: string;
    showOpeningDate?: string;
    showClosingDate?: string;
    artworks: Array<Artwork>;
};

export type Artist = {
    artistId?: number;
    firstName: string;
    lastName: string;
    interviewDate?: string;
    interviewerName?: string;
    areaCode?: string;
    telephoneNumber?: string;
    street?: string;
    zip?: Zip;
    salesLastYear: number;
    salesYearToDate: number;
    socialSecurityNumber?: string;
    usualMedium?: string;
    usualStyle?: string;
    usualType?: string;
    artworks: Array<Artwork>;
};

export type Artwork = {
    id?: number;
    artist: Artist;
    workImage?: Asset;
    workTitle: string;
    askingPrice?: number;
    dateListed?: string;
    dateReturned?: string;
    dateShown?: string;
    status?: string;
    workMedium?: string;
    workSize?: string;
    workStyle?: string;
    workType?: string;
    workYearCompleted?: string;
    collector?: Collector;
    sale?: Sale;
    shownIn: Array<ArtShow>;
};

export type Asset = {
    id: string;
    filename: string;
    contentType: string;
    size: number;
    createdAt: string;
    downloadUri: string;
};

export type Buyer = {
    id?: number;
    firstName: string;
    lastName: string;
    street?: string;
    zip?: Zip;
    areaCode?: string;
    telephoneNumber?: string;
    purchasesLastYear: number;
    purchasesYearToDate: number;
};

export type Collector = {
    socialSecurityNumber: string;
    firstName: string;
    lastName: string;
    interviewDate?: string;
    interviewerName?: string;
    areaCode?: string;
    telephoneNumber?: string;
    street?: string;
    zip?: Zip;
    salesLastYear: number;
    salesYearToDate: number;
    collectionArtistId?: Artist;
    collectionMedium?: string;
    collectionStyle?: string;
    collectionType?: string;
    artworks: Array<Artwork>;
};

export type Sale = {
    id?: number;
    artwork: Artwork;
    amountRemittedToOwner?: number;
    saleDate?: string;
    salePrice?: number;
    saleTax?: number;
    buyer: Buyer;
    salesperson: Salesperson;
};

export type Salesperson = {
    socialSecurityNumber?: string;
    firstName: string;
    lastName: string;
    street?: string;
    zip?: Zip;
};

export type Zip = {
    zip: string;
    city: string;
    state: string;
};

/**
 * Buyer Creation Request
 */
export type BuyerCreateRequest = {
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * ZIP code (must exist in Zip table)
     */
    zipCode?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Area code (3 digits)
     */
    areaCode?: string;
    /**
     * Telephone number (7 digits)
     */
    telephoneNumber?: string;
};

/**
 * Buyer Response DTO
 */
export type BuyerResponse = {
    /**
     * Buyer ID
     */
    id: number;
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * ZIP code
     */
    zipCode?: string;
    /**
     * Area code (3 digits)
     */
    areaCode?: string;
    /**
     * Telephone number (7 digits)
     */
    telephoneNumber?: string;
    /**
     * Purchases last year (USD)
     */
    purchasesLastYear?: number;
    /**
     * Purchases year-to-date (USD)
     */
    purchasesYearToDate?: number;
};

/**
 * API Login and Authorization Request
 */
export type AuthRequest = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

export type AuthResponse = {
    /**
     * JWT Authorization Token
     */
    token: string;
    /**
     * Username
     */
    username: string;
    /**
     * Email address
     */
    email: string;
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
};

export type AssetResponse = {
    id: string;
    filename: string;
    contentType: string;
    size: number;
    downloadUrl: string;
    createdAt: string;
};

/**
 * Artwork Creation Request
 */
export type ArtworkCreateRequest = {
    /**
     * Artist ID
     */
    artistId: number;
    /**
     * Asset ID for the image associated with the work
     */
    workImage?: string;
    /**
     * Title of the artwork
     */
    workTitle: string;
    /**
     * Year completed
     */
    workYearCompleted: string;
    /**
     * Medium
     */
    workMedium: string;
    /**
     * Style
     */
    workStyle: string;
    /**
     * Type
     */
    workType: string;
    /**
     * Size
     */
    workSize: string;
    /**
     * Collector's social security number
     */
    collectorSocialSecurityNumber?: string;
    /**
     * Date listed
     */
    dateListed: string;
    /**
     * Asking price in USD
     */
    askingPrice: string;
};

export type ArtworkResponse = {
    id: number;
    artistId: number;
    artistName: string;
    ownerName: string;
    status?: string;
    workImage?: string;
    workTitle?: string;
    workYearCompleted?: string;
    workMedium?: string;
    workStyle?: string;
    workType?: string;
    workSize?: string;
    dateListed?: string;
    dateShown?: string;
    dateSold?: string;
    dateReturned?: string;
    askingPrice?: number;
    salePrice?: number;
};

/**
 * Artist Creation Request
 */
export type ArtistCreateRequest = {
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Date of interview
     */
    interviewDate?: string;
    /**
     * Interviewer name
     */
    interviewerName?: string;
    /**
     * Area code
     */
    areaCode?: string;
    /**
     * Telephone number
     */
    telephoneNumber?: string;
    /**
     * Street address
     */
    street?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Zip code
     */
    zipCode?: string;
    /**
     * Social security number
     */
    socialSecurityNumber?: string;
    /**
     * Usual medium
     */
    usualMedium?: string;
    /**
     * Usual style
     */
    usualStyle?: string;
    /**
     * Usual type
     */
    usualType?: string;
};

export type ArtistResponse = {
    id: number;
    firstName: string;
    lastName: string;
    areaCode?: string;
    telephoneNumber?: string;
    address?: string;
    salesLastYear: number;
    salesYearToDate: number;
    usualMedium?: string;
    usualStyle?: string;
    usualType?: string;
};

export type CollectorResponse = {
    id: string;
    firstName: string;
    lastName: string;
    areaCode?: string;
    telephoneNumber?: string;
    address?: string;
    salesLastYear: number;
    salesYearToDate: number;
    collectionMedium?: string;
    collectionStyle?: string;
    collectionType?: string;
};

export type ArtworkListingResponse = {
    work: ArtworkResponse;
    sale?: SaleResponse;
    shownIn: Array<ShowResponse>;
};

export type ShowResponse = {
    title: string;
    featuredArtistName?: string;
    theme?: string;
    openingDate?: string;
    closingDate?: string;
};

export type GetAllSalesResponse = Array<SaleResponse>;

export type CreateSaleData = {
    requestBody: SaleCreateRequest;
};

export type CreateSaleResponse = SaleResponse;

export type GetSaleByIdData = {
    id: number;
};

export type GetSaleByIdResponse = SaleResponse;

export type SignupForMailingListData = {
    requestBody: MailingListSignupRequest;
};

export type SignupForMailingListResponse = string;

export type GetProfileResponse = ProfileResponse;

export type UpdateProfileData = {
    requestBody: ProfileUpdateRequest;
};

export type UpdateProfileResponse = ProfileResponse;

export type GetAllCollectorsData = {
    q?: string;
};

export type GetAllCollectorsResponse = Array<CollectorResponse>;

export type CreateCollectorData = {
    requestBody: CollectorCreateRequest;
};

export type CreateCollectorResponse = Collector;

export type GetCollectorData = {
    id: string;
};

export type GetCollectorResponse = CollectorResponse;

export type GetCollectorWorksData = {
    id: string;
};

export type GetCollectorWorksResponse = Array<ArtworkResponse>;

export type GetAllBuyersResponse = Array<BuyerResponse>;

export type CreateBuyerData = {
    requestBody: BuyerCreateRequest;
};

export type CreateBuyerResponse = BuyerResponse;

export type GetBuyerByIdData = {
    id: number;
};

export type GetBuyerByIdResponse = BuyerResponse;

export type LoginData = {
    requestBody: AuthRequest;
};

export type LoginResponse = AuthResponse;

export type UploadAssetData = {
    formData?: {
        file: (Blob | File);
    };
};

export type UploadAssetResponse = AssetResponse;

export type DownloadAssetData = {
    id: string;
};

export type DownloadAssetResponse = (Blob | File);

export type DeleteAssetData = {
    id: string;
};

export type DeleteAssetResponse = unknown;

export type GetAllArtworksResponse = Array<ArtworkResponse>;

export type CreateArtworkData = {
    requestBody: ArtworkCreateRequest;
};

export type CreateArtworkResponse = ArtworkResponse;

export type GetArtworkByIdData = {
    id: number;
};

export type GetArtworkByIdResponse = ArtworkListingResponse;

export type GetAllArtistsData = {
    q?: string;
};

export type GetAllArtistsResponse = Array<ArtistResponse>;

export type CreateArtistData = {
    requestBody: ArtistCreateRequest;
};

export type CreateArtistResponse = ArtistResponse;

export type GetArtistData = {
    id: number;
};

export type GetArtistResponse = ArtistResponse;

export type GetArtistWorksData = {
    id: number;
};

export type GetArtistWorksResponse = Array<ArtworkResponse>;

export type $OpenApiTs = {
    '/api/sales': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<SaleResponse>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: CreateSaleData;
            res: {
                /**
                 * OK
                 */
                200: SaleResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/sales/{id}': {
        get: {
            req: GetSaleByIdData;
            res: {
                /**
                 * OK
                 */
                200: SaleResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/public/mailing-list/signup': {
        post: {
            req: SignupForMailingListData;
            res: {
                /**
                 * OK
                 */
                200: string;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/profile': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: ProfileResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: UpdateProfileData;
            res: {
                /**
                 * OK
                 */
                200: ProfileResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/collectors': {
        get: {
            req: GetAllCollectorsData;
            res: {
                /**
                 * OK
                 */
                200: Array<CollectorResponse>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: CreateCollectorData;
            res: {
                /**
                 * OK
                 */
                200: Collector;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/collectors/{id}': {
        get: {
            req: GetCollectorData;
            res: {
                /**
                 * OK
                 */
                200: CollectorResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/collectors/{id}/works': {
        get: {
            req: GetCollectorWorksData;
            res: {
                /**
                 * OK
                 */
                200: Array<ArtworkResponse>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/buyers': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<BuyerResponse>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: CreateBuyerData;
            res: {
                /**
                 * OK
                 */
                200: BuyerResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/buyers/{id}': {
        get: {
            req: GetBuyerByIdData;
            res: {
                /**
                 * OK
                 */
                200: BuyerResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/auth/login': {
        post: {
            req: LoginData;
            res: {
                /**
                 * OK
                 */
                200: AuthResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/assets': {
        post: {
            req: UploadAssetData;
            res: {
                /**
                 * OK
                 */
                200: AssetResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/public/assets/{id}': {
        get: {
            req: DownloadAssetData;
            res: {
                /**
                 * OK
                 */
                200: (Blob | File);
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/assets/{id}': {
        delete: {
            req: DeleteAssetData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/artworks': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<ArtworkResponse>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: CreateArtworkData;
            res: {
                /**
                 * OK
                 */
                200: ArtworkResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/artworks/{id}': {
        get: {
            req: GetArtworkByIdData;
            res: {
                /**
                 * OK
                 */
                200: ArtworkListingResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/artist': {
        get: {
            req: GetAllArtistsData;
            res: {
                /**
                 * OK
                 */
                200: Array<ArtistResponse>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
        post: {
            req: CreateArtistData;
            res: {
                /**
                 * OK
                 */
                200: ArtistResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/artist/{id}': {
        get: {
            req: GetArtistData;
            res: {
                /**
                 * OK
                 */
                200: ArtistResponse;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
    '/api/artist/{id}/works': {
        get: {
            req: GetArtistWorksData;
            res: {
                /**
                 * OK
                 */
                200: Array<ArtworkResponse>;
                /**
                 * Unprocessable Entity
                 */
                422: ValidationErrorResponse;
            };
        };
    };
};